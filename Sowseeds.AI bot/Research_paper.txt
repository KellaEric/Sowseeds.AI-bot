Sowseeds AI Assistant: A Voice-Enabled Christian Faith-Based Virtual Assistant
Author: Kella Eric
Date: April 2025

Abstract
This research presents the design and implementation of the Sowseeds AI Assistant, a voice-enabled, interactive digital assistant tailored to support Christian faith-based engagement. Developed using Python and Streamlit, the assistant integrates natural language processing (NLP) and text-to-speech (TTS) technologies to deliver conversational guidance, support, and information dissemination in a spiritually enriching environment. The system is optimized for usability, accessibility, and personalization, allowing users to choose voice gender and adjust speech speed for an inclusive experience. The project aims to bridge faith and technology, empowering the next generation with AI tools aligned with Christian values.

1. Introduction
Artificial intelligence has revolutionized the way people interact with technology, particularly through intelligent virtual assistants. While mainstream assistants like Siri, Alexa, and Google Assistant cater to general audiences, there is a growing demand for niche, purpose-driven assistants. The Sowseeds AI Assistant is designed to fill this gap by focusing on Christian faith-based engagement through a voice-enabled interface.

The project leverages AI to foster spiritual growth, provide scriptural guidance, answer questions related to Christian living, and assist users in navigating digital faith-based content. It is a step toward making AI a spiritual companion rooted in ethical and theological principles.

2. Objectives
The key objectives of this project include:

Designing a voice-enabled AI assistant centered on Christian values.

Providing an interactive and intuitive user interface for both tech-savvy and non-tech users.

Offering personalized voice settings, including speech speed and gender.

Ensuring accessibility across devices through lightweight deployment (via Streamlit).

Enabling seamless navigation through core functionalities: Chat Assistant, About, Help, and Contact.

3. System Architecture
3.1 Frontend (UI Layer)
Built using Streamlit, the user interface is clean and minimalistic, with a sidebar for navigation and a central panel for displaying assistant outputs. Streamlit allows fast deployment and real-time UI updates with minimal boilerplate.

3.2 Voice Settings
Users can customize:

Voice Type: Male/Female

Voice Speed: Adjustable slider from 100 to 300 (words per minute)

These settings are critical for accessibility, especially for users with different auditory preferences or needs.

3.3 Functional Pages
The assistant features modular navigation:

Chat Assistant: Main interaction area for Q&A and conversation.

About: Displays information about the assistant and its developer.

Help: Provides user guidance and instructions.

Contact: Interface for reaching out to the development team or ministry.

3.4 Backend Logic
The AI engine integrates with a natural language model (such as OpenAI's GPT) to understand and generate human-like responses. Text-to-speech functionality is achieved using Python libraries like pyttsx3, ensuring offline and privacy-preserving speech synthesis.

4. Key Features
🎙️ Voice-Enabled Interaction: Speech output to aid both literacy and accessibility.

✝️ Faith-Based Guidance: Christian-centered dialogue generation.

⚙️ Customizable Experience: Selectable voice and speed settings.

🖥️ Lightweight Interface: Deployed locally using Streamlit for fast response.

📚 Developer Attribution: Transparent credit to the creator, Kella Eric.

5. Use Cases
Spiritual Growth: Daily devotionals, prayers, and scripture readings.

Faith Counseling: Guidance on life choices aligned with biblical teachings.

Church Support: Respond to common questions related to ministry events or values.

Educational Aid: Assist Christian educators and children in learning scripture interactively.

6. Evaluation
User feedback and beta testing revealed:

High satisfaction due to simplicity and spiritual alignment.

Desire for future integration of voice input (STT).

Need for a mobile-friendly version for broader access.

7. Future Work
🔄 Integrate speech-to-text (voice input) for full duplex communication.

📱 Deploy as a mobile app for iOS and Android.

🌍 Add multilingual support for global Christian communities.

🧠 Enhance theological accuracy through curated databases and expert review.

8. Conclusion
The Sowseeds AI Assistant represents a novel integration of AI and faith, aiming to offer spiritual guidance through accessible and customizable technology. Developed by Kella Eric, this project underscores the potential of artificial intelligence in supporting religious engagement and nurturing a tech-savvy generation of believers.

References
OpenAI API Documentation

Streamlit Official Docs

Pyttsx3 TTS Library

Bible API (future integration resource)

Christian Devotional Literature (for training data and prompts)

9. Technical Architecture
The Sowseeds AI Assistant is implemented using Python and built on top of the Streamlit framework for real-time interaction. It incorporates speech recognition, text-to-speech, and custom Large Language Model (LLM) integration for a conversational Christian faith-based experience.

9.1 Project Structure Overview
The project is organized as follows:
Sowseeds.AI Bot/
│
├── __pycache__/                 # Compiled Python cache files
├── helpers/                    # Modular helpers for LLM integration
│   ├── __init__.py
│   └── llm_helper.py           # Chat logic & stream_parser function
├── firebase/                   # Firebase setup for future cloud integration
├── img.png                     # Likely app image or branding
├── config.py                   # Central config file (e.g., page title)
├── ollama_chatbot.py          # Main Streamlit entry point
├── LICENSE
├── README.md
├── requirements.txt           # Python dependencies
└── .gitignore


9.2 Technologies Used

Component	Description
Python 3.12.3	Core programming language
Streamlit	For web-based user interface
pyttsx3	Text-to-speech conversion
speech_recognition	Speech-to-text (planned or partially integrated)
Custom LLM (Ollama)	Used to generate faith-based AI responses
Firebase (Optional)	Potential for cloud storage or user auth
9.3 Customization & Styling
A section of ollama_chatbot.py injects custom CSS to give the UI a consistent dark theme:

custom_css = f"""
    <style>
        body {{
            background-color: #000000;
            color: white;
        }}
        .stApp {{
            background-color: #000000;
        }}
    </style>
"""

9.4 Terminal Output Insight
The terminal output confirms that:

The app was started with streamlit run ollama_chatbot.py

The app is running locally at http://localhost:8501

Threads are running voice services in the background (run_tts)

Warnings like missing ScriptRunContext can be ignored in this mode

10. How to Run the Application (Step-by-Step)
To set up and run Sowseeds AI Assistant locally on your machine, follow these steps:

✅ Prerequisites
Python 3.10+ (you are using 3.12.3)

Pip (Python package installer)

Git (optional, for cloning repo)

Virtual environment (recommended)

🧩 Step 1: Clone or Download the Project
bash
Copy
Edit
git clone https://github.com/your-username/Sowseeds.AI-Bot.git
cd Sowseeds.AI-Bot
(or simply open the folder if you've already downloaded it)

📦 Step 2: Create & Activate Virtual Environment
bash
Copy
Edit
python -m venv venv
# Windows
venv\Scripts\activate
# macOS/Linux
source venv/bin/activate
📃 Step 3: Install Requirements
bash
Copy
Edit
pip install -r requirements.txt
This will install:

streamlit

speechrecognition

pyttsx3

other necessary packages

🚀 Step 4: Run the Streamlit App
bash
Copy
Edit
streamlit run ollama_chatbot.py
You’ll see something like:

nginx
Copy
Edit
You can now view your Streamlit app in your browser.

Local URL: http://localhost:8501
Network URL: http://127.0.0.1:8501
Open the provided Local URL in your browser to interact with the AI assistant.

🛠 Step 5: Customize (Optional)
Modify config.py for titles or themes.

Add new LLM prompts in llm_helper.py.

Style further using embedded CSS in ollama_chatbot.py.